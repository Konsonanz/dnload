#ifndef DNLOAD_H
#define DNLOAD_H

/** \file
 * \brief Dynamic loader header stub.
 *
 * This file was automatically generated by 'dnload.py'.
 */

#if defined(WIN32)
/** \cond */
#define _USE_MATH_DEFINES
#define NOMINMAX
/** \endcond */
#else
/** \cond */
#define GL_GLEXT_PROTOTYPES
/** \endcond */
#endif

#if defined(__cplusplus)
#include <cmath>
#include <cstdlib>
#else
#include <math.h>
#include <stdlib.h>
#endif

#if defined(DNLOAD_VIDEOCORE)
#include "bcm_host.h"
#include "EGL/egl.h"
#endif

#if defined(USE_LD)
#if defined(WIN32)
#include "windows.h"
#include "GL/glew.h"
#include "GL/glu.h"
#include "SDL.h"
#elif defined(__APPLE__)
#include "GL/glew.h"
#include <OpenGL/glu.h>
#include <SDL/SDL.h>
#else
#if defined(DNLOAD_GLESV2)
#include "GLES2/gl2.h"
#include "GLES2/gl2ext.h"
#else
#include "GL/glew.h"
#include "GL/glu.h"
#endif
#include "SDL.h"
#endif
#include "bsd_rand.h"
#else
#if defined(__APPLE__)
#include <OpenGL/gl.h>
#include <OpenGL/glext.h>
#include <OpenGL/glu.h>
#include <SDL/SDL.h>
#else
#if defined(DNLOAD_GLESV2)
#include "GLES2/gl2.h"
#include "GLES2/gl2ext.h"
#else
#include "GL/gl.h"
#include "GL/glext.h"
#include "GL/glu.h"
#endif
#include "SDL.h"
#endif
#endif

/** Macro stringification helper (adds indirection). */
#define DNLOAD_MACRO_STR_HELPER(op) #op
/** Macro stringification. */
#define DNLOAD_MACRO_STR(op) DNLOAD_MACRO_STR_HELPER(op)

#if defined(DNLOAD_GLESV2)
/** Apientry definition (OpenGL ES 2.0). */
#define DNLOAD_APIENTRY GL_APIENTRY
#else
/** Apientry definition (OpenGL). */
#define DNLOAD_APIENTRY GLAPIENTRY
#endif

#if (defined(_LP64) && _LP64) || (defined(__LP64__) && __LP64__)
/** Size of pointer in bytes (64-bit). */
#define DNLOAD_POINTER_SIZE 8
#else
/** Size of pointer in bytes (32-bit). */
#define DNLOAD_POINTER_SIZE 4
#endif

#if !defined(USE_LD)
/** Error string for when assembler exit procedure is not available. */
#define DNLOAD_ASM_EXIT_ERROR "no assembler exit procedure defined for current operating system or architecture"
/** Perform exit syscall in assembler. */
static void asm_exit(void)
{
#if !defined(DNLOAD_NO_DEBUGGER_TRAP) && (defined(__x86_64__) || defined(__i386__))
  asm("int $0x3" : /* no output */ : /* no input */ : /* no clobber */);
#elif defined(__x86_64__)
#if defined(__FreeBSD__)
  asm_exit() asm("syscall" : /* no output */ : "a"(1) : /* no clobber */);
#elif defined(__linux__)
  asm_exit() asm("syscall" : /* no output */ : "a"(60) : /* no clobber */);
#else
#pragma message DNLOAD_MACRO_STR(DNLOAD_ASM_EXIT_ERROR)
#error
#endif
#elif defined(__i386__)
#if defined(__FreeBSD__) || defined(__linux__)
  asm("int $0x80" : /* no output */ : "a"(1) : /* no clobber */);
#else
#pragma message DNLOAD_MACRO_STR(DNLOAD_ASM_EXIT_ERROR)
#error
#endif
#elif defined(__arm__)
#if defined(__linux__)
  register int r7 asm("r7") = 1;
  asm("swi #0" : /* no output */ : "r"(r7) : /* no clobber */);
#else
#pragma message DNLOAD_MACRO_STR(DNLOAD_ASM_EXIT_ERROR)
#error
#endif
#else
#pragma message DNLOAD_MACRO_STR(DNLOAD_ASM_EXIT_ERROR)
#error
#endif
}
#endif

#if defined(USE_LD)
/** \cond */
#define dnload_glAttachShader glAttachShader
#define dnload_glCompileShader glCompileShader
#define dnload_glCreateProgram glCreateProgram
#define dnload_glCreateShader glCreateShader
#define dnload_glDrawArrays glDrawArrays
#define dnload_glEnableVertexAttribArray glEnableVertexAttribArray
#define dnload_glGetUniformLocation glGetUniformLocation
#define dnload_glLinkProgram glLinkProgram
#define dnload_glShaderSource glShaderSource
#define dnload_glUniform3fv glUniform3fv
#define dnload_glUseProgram glUseProgram
#define dnload_glVertexAttribPointer glVertexAttribPointer
#define dnload_SDL_Init SDL_Init
#define dnload_SDL_OpenAudio SDL_OpenAudio
#define dnload_SDL_PauseAudio SDL_PauseAudio
#define dnload_SDL_PollEvent SDL_PollEvent
#define dnload_SDL_Quit SDL_Quit
#define dnload_SDL_ShowCursor SDL_ShowCursor
#define dnload_SDL_CreateWindow SDL_CreateWindow
#define dnload_SDL_GL_CreateContext SDL_GL_CreateContext
#define dnload_SDL_GL_SetAttribute SDL_GL_SetAttribute
#define dnload_SDL_GL_SwapWindow SDL_GL_SwapWindow
/** \endcond */
#else
/** \cond */
#define dnload_glAttachShader g_symbol_table.glAttachShader
#define dnload_glCompileShader g_symbol_table.glCompileShader
#define dnload_glCreateProgram g_symbol_table.glCreateProgram
#define dnload_glCreateShader g_symbol_table.glCreateShader
#define dnload_glDrawArrays g_symbol_table.glDrawArrays
#define dnload_glEnableVertexAttribArray g_symbol_table.glEnableVertexAttribArray
#define dnload_glGetUniformLocation g_symbol_table.glGetUniformLocation
#define dnload_glLinkProgram g_symbol_table.glLinkProgram
#define dnload_glShaderSource g_symbol_table.glShaderSource
#define dnload_glUniform3fv g_symbol_table.glUniform3fv
#define dnload_glUseProgram g_symbol_table.glUseProgram
#define dnload_glVertexAttribPointer g_symbol_table.glVertexAttribPointer
#define dnload_SDL_Init g_symbol_table.SDL_Init
#define dnload_SDL_OpenAudio g_symbol_table.SDL_OpenAudio
#define dnload_SDL_PauseAudio g_symbol_table.SDL_PauseAudio
#define dnload_SDL_PollEvent g_symbol_table.SDL_PollEvent
#define dnload_SDL_Quit g_symbol_table.SDL_Quit
#define dnload_SDL_ShowCursor g_symbol_table.SDL_ShowCursor
#define dnload_SDL_CreateWindow g_symbol_table.SDL_CreateWindow
#define dnload_SDL_GL_CreateContext g_symbol_table.SDL_GL_CreateContext
#define dnload_SDL_GL_SetAttribute g_symbol_table.SDL_GL_SetAttribute
#define dnload_SDL_GL_SwapWindow g_symbol_table.SDL_GL_SwapWindow
/** \endcond */
#endif

#if !defined(USE_LD)
/** \brief Symbol table structure.
 *
 * Contains all the symbols required for dynamic linking.
 */
static struct SymbolTableStruct
{
  void (DNLOAD_APIENTRY *glAttachShader)(GLuint, GLuint);
  void (DNLOAD_APIENTRY *glCompileShader)(GLuint);
  GLuint (DNLOAD_APIENTRY *glCreateProgram)(void);
  GLuint (DNLOAD_APIENTRY *glCreateShader)(GLenum);
  void (DNLOAD_APIENTRY *glDrawArrays)(GLenum, GLint, GLsizei);
  void (DNLOAD_APIENTRY *glEnableVertexAttribArray)(GLuint);
  GLint (DNLOAD_APIENTRY *glGetUniformLocation)(GLuint, const GLchar*);
  void (DNLOAD_APIENTRY *glLinkProgram)(GLuint);
  void (DNLOAD_APIENTRY *glShaderSource)(GLuint, GLsizei, const GLchar**, const GLint*);
  void (DNLOAD_APIENTRY *glUniform3fv)(GLint, GLsizei, const GLfloat*);
  void (DNLOAD_APIENTRY *glUseProgram)(GLuint);
  void (DNLOAD_APIENTRY *glVertexAttribPointer)(GLuint, GLint, GLenum, GLboolean, GLsizei, const GLvoid*);
  int (*SDL_Init)(Uint32);
  int (*SDL_OpenAudio)(SDL_AudioSpec*, SDL_AudioSpec*);
  void (*SDL_PauseAudio)(int);
  int (*SDL_PollEvent)(SDL_Event*);
  void (*SDL_Quit)(void);
  int (*SDL_ShowCursor)(int);
  SDL_Window* (*SDL_CreateWindow)(const char*, int, int, int, int, Uint32);
  SDL_GLContext (*SDL_GL_CreateContext)(SDL_Window*);
  int (*SDL_GL_SetAttribute)(SDL_GLattr, int);
  void (*SDL_GL_SwapWindow)(SDL_Window*);
} g_symbol_table;
#endif

#if defined(USE_LD)
/** \cond */
#define dnload()
/** \endcond */
#else
#include <dlfcn.h>
static const char g_dynstr[] = ""
"libGLESv2.so\0"
"glAttachShader\0"
"glCompileShader\0"
"glCreateProgram\0"
"glCreateShader\0"
"glDrawArrays\0"
"glEnableVertexAttribArray\0"
"glGetUniformLocation\0"
"glLinkProgram\0"
"glShaderSource\0"
"glUniform3fv\0"
"glUseProgram\0"
"glVertexAttribPointer\0"
"\0libSDL2.so\0"
"SDL_Init\0"
"SDL_OpenAudio\0"
"SDL_PauseAudio\0"
"SDL_PollEvent\0"
"SDL_Quit\0"
"SDL_ShowCursor\0"
"SDL_CreateWindow\0"
"SDL_GL_CreateContext\0"
"SDL_GL_SetAttribute\0"
"SDL_GL_SwapWindow\0"
"\0";
/** \brief Perform init.
 *
 * dlopen/dlsym -style.
 */
static void dnload(void)
{
  char *src = (char*)g_dynstr;
  void **dst = (void**)&g_symbol_table;
  do {
    void *handle = dlopen(src, RTLD_LAZY);
    for(;;)
    {
      while(*(src++));
      if(!*(src))
      {
        break;
      }
      *dst++ = dlsym(handle, src);
    }
  } while(*(++src));
}
#endif

#if defined(__clang__)
/** Visibility declaration for symbols that require it (clang). */
#define DNLOAD_VISIBILITY __attribute__((visibility("default")))
#else
/** Visibility declaration for symbols that require it (gcc). */
#define DNLOAD_VISIBILITY __attribute__((externally_visible,visibility("default")))
#endif

#if !defined(USE_LD)
#if defined(__cplusplus)
extern "C" {
#endif
/** Program entry point. */
void _start() DNLOAD_VISIBILITY;
#if defined(__cplusplus)
}
#endif
#endif

#if !defined(USE_LD) && defined(__FreeBSD__)
#if defined(__cplusplus)
extern "C" {
#endif
/** Symbol required by libc. */
void *environ DNLOAD_VISIBILITY;
/** Symbol required by libc. */
void *__progname DNLOAD_VISIBILITY;
#if defined(__cplusplus)
}
#endif
#endif

#endif
